trigger: none 

pr: none 

variables:
  vmImage: 'ubuntu-latest'
  location: canadacentral
  nodeCount: 3
  nodeSize: Standard_DS2_v2
  zones: false
  # define 3 more variables: kv and aksPrefix in the pipeline UI definition

stages:
- stage: CreateAKSCluster
  displayName: CreateAKSCluster
  jobs:
  - job: CreateAKSCluster
    pool:
      vmImage: $(vmImage)
    steps:
    - task: AzureKeyVault@1
      displayName: 'Get secrets from Key Vault'
      inputs:
        azureSubscription: keyvault
        KeyVaultName: $(kv)
        SecretsFilter: 'subscriptionId,spId,spSecret,spTenantId'
    - bash: |
        randomSuffix=$(shuf -i 1000-9999 -n 1)
        echo "##vso[task.setvariable variable=aksName]$(aksPrefix)$randomSuffix"
      displayName: 'setup aks name'
    - task: DownloadSecureFile@1
      name: id_rsa_pub
      displayName: 'download ssh key for jumpbox'
      inputs:
        secureFile: 'id_rsa.pub'
    - task: Bash@3
      displayName: 'create rg and aks'
      inputs:
        targetType: filePath
        filePath: './create-aks-cluster.sh'
        failOnStderr: false
      env:
          LOCATION: $(location)
          NODE_COUNT: $(nodeCount)
          NODE_SIZE: $(nodeSize)
          SUBSCRIPTION_ID: $(subscriptionId)
          SP_ID: $(spId)
          SP_SECRET: $(spSecret)
          SP_TENANT_ID: $(spTenantId)
          AKS: $(aksName)
          RG: $(aksName)
          ZONES: $(zones)
          KURED_WEB_HOOK_URL: $(kuredWebHookUrl)
          JUMPBOX_SSH_KEY: $(id_rsa_pub.secureFilePath)
    - bash: |
        echo $(jq -n --arg aksName "$(aksName)" '{aksName: $aksName}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      displayName: 'write variables for the next stage'
    - publish: $(build.artifactStagingDirectory)
      artifact: variables
- stage: AzureTests
  displayName: AzureTests
  jobs:
  - job: AzureTests
    pool:
      vmImage: $(vmImage)
    steps:
    - download: current
      artifact: variables
    - bash: |
        aksName=$(jq .aksName $(pipeline.workspace)/variables/variables.json -r)
        echo "##vso[task.setvariable variable=aksName]$aksName"
      failOnStderr: true
      displayName: 'get variables from previous stage'
    - task: AzureKeyVault@1
      displayName: 'Get secrets from Key Vault'
      inputs:
        azureSubscription: keyvault
        KeyVaultName: $(kv)
        SecretsFilter: 'subscriptionId,spId,spSecret,spTenantId'
    - task: Bash@3
      displayName: 'test azure infra'
      inputs:
        targetType: filePath
        filePath: './test-azure-infra.sh'
        failOnStderr: true
      env:
          SUBSCRIPTION_ID: $(subscriptionId)
          SP_ID: $(spId)
          SP_SECRET: $(spSecret)
          SP_TENANT_ID: $(spTenantId)
          AKS: $(aksName)
          RG: $(aksName)
